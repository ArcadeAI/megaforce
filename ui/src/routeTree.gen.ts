/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VerifyRouteImport } from './routes/verify'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as PersonasRouteImport } from './routes/personas'
import { Route as GenerateRouteImport } from './routes/generate'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PersonasPersonaIdRouteImport } from './routes/personas.$personaId'
import { Route as JobJobIdRouteImport } from './routes/job.$jobId'
import { Route as GenerateRunIdRouteImport } from './routes/generate.$runId'

const VerifyRoute = VerifyRouteImport.update({
  id: '/verify',
  path: '/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const PersonasRoute = PersonasRouteImport.update({
  id: '/personas',
  path: '/personas',
  getParentRoute: () => rootRouteImport,
} as any)
const GenerateRoute = GenerateRouteImport.update({
  id: '/generate',
  path: '/generate',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PersonasPersonaIdRoute = PersonasPersonaIdRouteImport.update({
  id: '/$personaId',
  path: '/$personaId',
  getParentRoute: () => PersonasRoute,
} as any)
const JobJobIdRoute = JobJobIdRouteImport.update({
  id: '/job/$jobId',
  path: '/job/$jobId',
  getParentRoute: () => rootRouteImport,
} as any)
const GenerateRunIdRoute = GenerateRunIdRouteImport.update({
  id: '/$runId',
  path: '/$runId',
  getParentRoute: () => GenerateRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/generate': typeof GenerateRouteWithChildren
  '/personas': typeof PersonasRouteWithChildren
  '/settings': typeof SettingsRoute
  '/verify': typeof VerifyRoute
  '/generate/$runId': typeof GenerateRunIdRoute
  '/job/$jobId': typeof JobJobIdRoute
  '/personas/$personaId': typeof PersonasPersonaIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/generate': typeof GenerateRouteWithChildren
  '/personas': typeof PersonasRouteWithChildren
  '/settings': typeof SettingsRoute
  '/verify': typeof VerifyRoute
  '/generate/$runId': typeof GenerateRunIdRoute
  '/job/$jobId': typeof JobJobIdRoute
  '/personas/$personaId': typeof PersonasPersonaIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/generate': typeof GenerateRouteWithChildren
  '/personas': typeof PersonasRouteWithChildren
  '/settings': typeof SettingsRoute
  '/verify': typeof VerifyRoute
  '/generate/$runId': typeof GenerateRunIdRoute
  '/job/$jobId': typeof JobJobIdRoute
  '/personas/$personaId': typeof PersonasPersonaIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/generate'
    | '/personas'
    | '/settings'
    | '/verify'
    | '/generate/$runId'
    | '/job/$jobId'
    | '/personas/$personaId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/generate'
    | '/personas'
    | '/settings'
    | '/verify'
    | '/generate/$runId'
    | '/job/$jobId'
    | '/personas/$personaId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/generate'
    | '/personas'
    | '/settings'
    | '/verify'
    | '/generate/$runId'
    | '/job/$jobId'
    | '/personas/$personaId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  GenerateRoute: typeof GenerateRouteWithChildren
  PersonasRoute: typeof PersonasRouteWithChildren
  SettingsRoute: typeof SettingsRoute
  VerifyRoute: typeof VerifyRoute
  JobJobIdRoute: typeof JobJobIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/verify': {
      id: '/verify'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof VerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/personas': {
      id: '/personas'
      path: '/personas'
      fullPath: '/personas'
      preLoaderRoute: typeof PersonasRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/generate': {
      id: '/generate'
      path: '/generate'
      fullPath: '/generate'
      preLoaderRoute: typeof GenerateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/personas/$personaId': {
      id: '/personas/$personaId'
      path: '/$personaId'
      fullPath: '/personas/$personaId'
      preLoaderRoute: typeof PersonasPersonaIdRouteImport
      parentRoute: typeof PersonasRoute
    }
    '/job/$jobId': {
      id: '/job/$jobId'
      path: '/job/$jobId'
      fullPath: '/job/$jobId'
      preLoaderRoute: typeof JobJobIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/generate/$runId': {
      id: '/generate/$runId'
      path: '/$runId'
      fullPath: '/generate/$runId'
      preLoaderRoute: typeof GenerateRunIdRouteImport
      parentRoute: typeof GenerateRoute
    }
  }
}

interface GenerateRouteChildren {
  GenerateRunIdRoute: typeof GenerateRunIdRoute
}

const GenerateRouteChildren: GenerateRouteChildren = {
  GenerateRunIdRoute: GenerateRunIdRoute,
}

const GenerateRouteWithChildren = GenerateRoute._addFileChildren(
  GenerateRouteChildren,
)

interface PersonasRouteChildren {
  PersonasPersonaIdRoute: typeof PersonasPersonaIdRoute
}

const PersonasRouteChildren: PersonasRouteChildren = {
  PersonasPersonaIdRoute: PersonasPersonaIdRoute,
}

const PersonasRouteWithChildren = PersonasRoute._addFileChildren(
  PersonasRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  GenerateRoute: GenerateRouteWithChildren,
  PersonasRoute: PersonasRouteWithChildren,
  SettingsRoute: SettingsRoute,
  VerifyRoute: VerifyRoute,
  JobJobIdRoute: JobJobIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
